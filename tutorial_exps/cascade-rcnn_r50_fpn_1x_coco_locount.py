model = dict(
    type='CascadeRCNN',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        bgr_to_rgb=True,
        pad_size_divisor=32),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[
                8,
            ],
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[
            1,
            0.5,
            0.25,
        ],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[
                4,
                8,
                16,
                32,
            ]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=140,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.1,
                        0.1,
                        0.2,
                        0.2,
                    ]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=140,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                    ]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=140,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.033,
                        0.033,
                        0.067,
                        0.067,
                    ]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = 'data/coco'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', scale=(
        1333,
        800,
    ), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackDetInputs'),
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(
        1333,
        800,
    ), keep_ratio=True),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='PackDetInputs',
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        )),
]
train_dataloader = dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    dataset=dict(
        type='CocoDataset',
        data_root='data/coco',
        ann_file='annotations/annotation_train.json',
        data_prefix=dict(img='Locount_ImagesTrain'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', scale=(
                1333,
                800,
            ), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackDetInputs'),
        ],
        backend_args=None,
        metainfo=dict(
            classes=(
                'Thermos bottle',
                'Soymilk',
                'Baby slippers',
                'Makeup tools',
                'Adult milk powder',
                'Red wine',
                'Toothpaste',
                'Pot shovel',
                'Rubber ball',
                'Rise',
                'Stool',
                'Vinegar',
                'Children Socks',
                'Shampoo',
                'Cake',
                'Pen',
                'Flour',
                'Sesame paste',
                'Dried meat',
                'Baby diapers',
                'Jacket',
                'Herbal tea',
                'Mouth wash',
                'Care Kit',
                'Baby Toys',
                'Quick-frozen Wonton',
                'Quick-frozen Tangyuan',
                'Electric Hot pot',
                'Electric steaming pan',
                'Electric kettle',
                'Sports cup',
                'Quick-frozen dumplings',
                'Can',
                'Air conditioner',
                'Instant noodles',
                'Baby washing and nursing supplie',
                'Socket',
                'Potato chips',
                'Disposable bag',
                'Adult shoes',
                'Football',
                'Hair drier',
                'Chopping block',
                'Lingerie',
                'Mug',
                'Soup ladle',
                'Children hats',
                'Lotus root flour',
                'Fish tofu',
                'Electric iron',
                'Ice cream',
                'Bath lotion',
                'Juicer',
                'Tea beverage',
                'Dinner plate',
                'Notebook',
                'Facial Cleanser',
                'Biscuits',
                'Chewing gum',
                'Mixed congee',
                'Facial mask',
                'Bowl',
                'Soybean Milk machine',
                'Men underwear',
                'Dairy',
                'Hair gel',
                'Tea',
                'Storage bottle',
                'Spoon',
                'Baby milk powder',
                'Sauce',
                'Electric fan',
                'Dried beans',
                'Disposable cups',
                'Draw bar box',
                'Cooking wine',
                'Pencil case',
                'Carbonated drinks',
                'Adult Diapers',
                'Soy sauce',
                'Desk lamp',
                'Electromagnetic furnace',
                'Badminton',
                'Coffee',
                'Air conditioning fan',
                'Tampon',
                'Children Toys',
                'Children underwear',
                'Knives',
                'Pasta',
                'Microwave Oven',
                'Hair conditioner',
                'Ginger Tea',
                'Baby Furniture',
                'Forks',
                'Pie',
                'Television',
                'Baby tableware',
                'Skate',
                'Oats',
                'Cotton swab',
                'Storage box',
                'Noodle',
                'Razor',
                'Refrigerator',
                'Toothbrush',
                'Chocolates',
                'Adult socks',
                'Knapsack',
                'Sour Plum Soup',
                'Cutter',
                'Band aid',
                'Rice cooker',
                'Cocktail',
                'Skin care set',
                'Walnut powder',
                'Liquor and Spirits',
                'Emulsion',
                'Soap',
                'Hair dye',
                'Fresh-keeping film',
                'Baby handkerchiefs ',
                'Children shoes',
                'Washing machine',
                'Chopsticks',
                'Guozhen',
                'Trousers',
                'Adult hat',
                'Trash',
                'Bedding set',
                'Basin',
                'Electric frying pan',
                'Food box',
                'Dried fish',
                'Baby carriage',
                'Hot strips',
                'Basketball',
                'Comb',
                'Coat hanger',
            ))))
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/coco',
        ann_file='annotations/annotation_test.json',
        data_prefix=dict(img='Locount_ImagesTest'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(
                1333,
                800,
            ), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                )),
        ],
        backend_args=None,
        metainfo=dict(
            classes=(
                'Thermos bottle',
                'Soymilk',
                'Baby slippers',
                'Makeup tools',
                'Adult milk powder',
                'Red wine',
                'Toothpaste',
                'Pot shovel',
                'Rubber ball',
                'Rise',
                'Stool',
                'Vinegar',
                'Children Socks',
                'Shampoo',
                'Cake',
                'Pen',
                'Flour',
                'Sesame paste',
                'Dried meat',
                'Baby diapers',
                'Jacket',
                'Herbal tea',
                'Mouth wash',
                'Care Kit',
                'Baby Toys',
                'Quick-frozen Wonton',
                'Quick-frozen Tangyuan',
                'Electric Hot pot',
                'Electric steaming pan',
                'Electric kettle',
                'Sports cup',
                'Quick-frozen dumplings',
                'Can',
                'Air conditioner',
                'Instant noodles',
                'Baby washing and nursing supplie',
                'Socket',
                'Potato chips',
                'Disposable bag',
                'Adult shoes',
                'Football',
                'Hair drier',
                'Chopping block',
                'Lingerie',
                'Mug',
                'Soup ladle',
                'Children hats',
                'Lotus root flour',
                'Fish tofu',
                'Electric iron',
                'Ice cream',
                'Bath lotion',
                'Juicer',
                'Tea beverage',
                'Dinner plate',
                'Notebook',
                'Facial Cleanser',
                'Biscuits',
                'Chewing gum',
                'Mixed congee',
                'Facial mask',
                'Bowl',
                'Soybean Milk machine',
                'Men underwear',
                'Dairy',
                'Hair gel',
                'Tea',
                'Storage bottle',
                'Spoon',
                'Baby milk powder',
                'Sauce',
                'Electric fan',
                'Dried beans',
                'Disposable cups',
                'Draw bar box',
                'Cooking wine',
                'Pencil case',
                'Carbonated drinks',
                'Adult Diapers',
                'Soy sauce',
                'Desk lamp',
                'Electromagnetic furnace',
                'Badminton',
                'Coffee',
                'Air conditioning fan',
                'Tampon',
                'Children Toys',
                'Children underwear',
                'Knives',
                'Pasta',
                'Microwave Oven',
                'Hair conditioner',
                'Ginger Tea',
                'Baby Furniture',
                'Forks',
                'Pie',
                'Television',
                'Baby tableware',
                'Skate',
                'Oats',
                'Cotton swab',
                'Storage box',
                'Noodle',
                'Razor',
                'Refrigerator',
                'Toothbrush',
                'Chocolates',
                'Adult socks',
                'Knapsack',
                'Sour Plum Soup',
                'Cutter',
                'Band aid',
                'Rice cooker',
                'Cocktail',
                'Skin care set',
                'Walnut powder',
                'Liquor and Spirits',
                'Emulsion',
                'Soap',
                'Hair dye',
                'Fresh-keeping film',
                'Baby handkerchiefs ',
                'Children shoes',
                'Washing machine',
                'Chopsticks',
                'Guozhen',
                'Trousers',
                'Adult hat',
                'Trash',
                'Bedding set',
                'Basin',
                'Electric frying pan',
                'Food box',
                'Dried fish',
                'Baby carriage',
                'Hot strips',
                'Basketball',
                'Comb',
                'Coat hanger',
            ))))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/coco',
        ann_file='annotations/annotation_test.json',
        data_prefix=dict(img='Locount_ImagesTest'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(
                1333,
                800,
            ), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                )),
        ],
        backend_args=None,
        metainfo=dict(
            classes=(
                'Thermos bottle',
                'Soymilk',
                'Baby slippers',
                'Makeup tools',
                'Adult milk powder',
                'Red wine',
                'Toothpaste',
                'Pot shovel',
                'Rubber ball',
                'Rise',
                'Stool',
                'Vinegar',
                'Children Socks',
                'Shampoo',
                'Cake',
                'Pen',
                'Flour',
                'Sesame paste',
                'Dried meat',
                'Baby diapers',
                'Jacket',
                'Herbal tea',
                'Mouth wash',
                'Care Kit',
                'Baby Toys',
                'Quick-frozen Wonton',
                'Quick-frozen Tangyuan',
                'Electric Hot pot',
                'Electric steaming pan',
                'Electric kettle',
                'Sports cup',
                'Quick-frozen dumplings',
                'Can',
                'Air conditioner',
                'Instant noodles',
                'Baby washing and nursing supplie',
                'Socket',
                'Potato chips',
                'Disposable bag',
                'Adult shoes',
                'Football',
                'Hair drier',
                'Chopping block',
                'Lingerie',
                'Mug',
                'Soup ladle',
                'Children hats',
                'Lotus root flour',
                'Fish tofu',
                'Electric iron',
                'Ice cream',
                'Bath lotion',
                'Juicer',
                'Tea beverage',
                'Dinner plate',
                'Notebook',
                'Facial Cleanser',
                'Biscuits',
                'Chewing gum',
                'Mixed congee',
                'Facial mask',
                'Bowl',
                'Soybean Milk machine',
                'Men underwear',
                'Dairy',
                'Hair gel',
                'Tea',
                'Storage bottle',
                'Spoon',
                'Baby milk powder',
                'Sauce',
                'Electric fan',
                'Dried beans',
                'Disposable cups',
                'Draw bar box',
                'Cooking wine',
                'Pencil case',
                'Carbonated drinks',
                'Adult Diapers',
                'Soy sauce',
                'Desk lamp',
                'Electromagnetic furnace',
                'Badminton',
                'Coffee',
                'Air conditioning fan',
                'Tampon',
                'Children Toys',
                'Children underwear',
                'Knives',
                'Pasta',
                'Microwave Oven',
                'Hair conditioner',
                'Ginger Tea',
                'Baby Furniture',
                'Forks',
                'Pie',
                'Television',
                'Baby tableware',
                'Skate',
                'Oats',
                'Cotton swab',
                'Storage box',
                'Noodle',
                'Razor',
                'Refrigerator',
                'Toothbrush',
                'Chocolates',
                'Adult socks',
                'Knapsack',
                'Sour Plum Soup',
                'Cutter',
                'Band aid',
                'Rice cooker',
                'Cocktail',
                'Skin care set',
                'Walnut powder',
                'Liquor and Spirits',
                'Emulsion',
                'Soap',
                'Hair dye',
                'Fresh-keeping film',
                'Baby handkerchiefs ',
                'Children shoes',
                'Washing machine',
                'Chopsticks',
                'Guozhen',
                'Trousers',
                'Adult hat',
                'Trash',
                'Bedding set',
                'Basin',
                'Electric frying pan',
                'Food box',
                'Dried fish',
                'Baby carriage',
                'Hot strips',
                'Basketball',
                'Comb',
                'Coat hanger',
            ))))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='data/coco/annotations/annotation_test.json',
    metric='bbox',
    format_only=False,
    backend_args=None)
test_evaluator = dict(
    type='CocoMetric',
    ann_file='data/coco/annotations/annotation_test.json',
    metric='bbox',
    format_only=False,
    backend_args=None)
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=12, val_interval=3)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR', start_factor=0.001, by_epoch=False, begin=0, end=500),
    dict(
        type='MultiStepLR',
        begin=0,
        end=12,
        by_epoch=True,
        milestones=[
            8,
            11,
        ],
        gamma=0.1),
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001))
auto_scale_lr = dict(enable=False, base_batch_size=16)
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=10),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=3),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = None
resume = False
metainfo = dict(
    classes=(
        'Thermos bottle',
        'Soymilk',
        'Baby slippers',
        'Makeup tools',
        'Adult milk powder',
        'Red wine',
        'Toothpaste',
        'Pot shovel',
        'Rubber ball',
        'Rise',
        'Stool',
        'Vinegar',
        'Children Socks',
        'Shampoo',
        'Cake',
        'Pen',
        'Flour',
        'Sesame paste',
        'Dried meat',
        'Baby diapers',
        'Jacket',
        'Herbal tea',
        'Mouth wash',
        'Care Kit',
        'Baby Toys',
        'Quick-frozen Wonton',
        'Quick-frozen Tangyuan',
        'Electric Hot pot',
        'Electric steaming pan',
        'Electric kettle',
        'Sports cup',
        'Quick-frozen dumplings',
        'Can',
        'Air conditioner',
        'Instant noodles',
        'Baby washing and nursing supplie',
        'Socket',
        'Potato chips',
        'Disposable bag',
        'Adult shoes',
        'Football',
        'Hair drier',
        'Chopping block',
        'Lingerie',
        'Mug',
        'Soup ladle',
        'Children hats',
        'Lotus root flour',
        'Fish tofu',
        'Electric iron',
        'Ice cream',
        'Bath lotion',
        'Juicer',
        'Tea beverage',
        'Dinner plate',
        'Notebook',
        'Facial Cleanser',
        'Biscuits',
        'Chewing gum',
        'Mixed congee',
        'Facial mask',
        'Bowl',
        'Soybean Milk machine',
        'Men underwear',
        'Dairy',
        'Hair gel',
        'Tea',
        'Storage bottle',
        'Spoon',
        'Baby milk powder',
        'Sauce',
        'Electric fan',
        'Dried beans',
        'Disposable cups',
        'Draw bar box',
        'Cooking wine',
        'Pencil case',
        'Carbonated drinks',
        'Adult Diapers',
        'Soy sauce',
        'Desk lamp',
        'Electromagnetic furnace',
        'Badminton',
        'Coffee',
        'Air conditioning fan',
        'Tampon',
        'Children Toys',
        'Children underwear',
        'Knives',
        'Pasta',
        'Microwave Oven',
        'Hair conditioner',
        'Ginger Tea',
        'Baby Furniture',
        'Forks',
        'Pie',
        'Television',
        'Baby tableware',
        'Skate',
        'Oats',
        'Cotton swab',
        'Storage box',
        'Noodle',
        'Razor',
        'Refrigerator',
        'Toothbrush',
        'Chocolates',
        'Adult socks',
        'Knapsack',
        'Sour Plum Soup',
        'Cutter',
        'Band aid',
        'Rice cooker',
        'Cocktail',
        'Skin care set',
        'Walnut powder',
        'Liquor and Spirits',
        'Emulsion',
        'Soap',
        'Hair dye',
        'Fresh-keeping film',
        'Baby handkerchiefs ',
        'Children shoes',
        'Washing machine',
        'Chopsticks',
        'Guozhen',
        'Trousers',
        'Adult hat',
        'Trash',
        'Bedding set',
        'Basin',
        'Electric frying pan',
        'Food box',
        'Dried fish',
        'Baby carriage',
        'Hot strips',
        'Basketball',
        'Comb',
        'Coat hanger',
    ))
work_dir = './tutorial_exps'
